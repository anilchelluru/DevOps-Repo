KUBERNETES ARCHITECTURE HIERARACHY ---- 
There is a kubernetes cluster,
In each cluster, there are many nodes
In each nodes, there are many pods,
In each pods (pod is a outer layer of a container), there are one or more containers (container runs in a container runtime within a pod) , if these containers are relatively tightly coupled within a pod.

1) Config maps & Secrets :
The major difference is, Secrets store data in base64 format meanwhile ConfigMaps store data in a plain text. If you have some critical data like, keys, passwords, service accounts credentials, db connection string, etc then you should always go for Secrets rather than Configs.

2) Cluster IP, node port & LB :
ClusterIP: Exposes the service on a cluster-internal IP. Choosing this value makes the service only reachable from within the cluster. This is the default ServiceType

NodePort: Exposes the service on each Node’s IP at a static port (the NodePort). A ClusterIP service, to which the NodePort service will route, is automatically created. You’ll be able to contact the NodePort service, from outside the cluster, by requesting <NodeIP>:<NodePort>.

LoadBalancer: Exposes the service externally using a cloud provider’s load balancer. NodePort and ClusterIP services, to which the external load balancer will route, are automatically created.

4) Mark a node as unschedulable
kubectl cordon <node>

5) Drain a node for maintenance
kubectl drain <node>

6) Mark a node as schedulable
kubectl uncordon <node>

7) How to list events ?
kubectl get events -A
kubectl get events --sort-by=<JSONPath>

8) Display addresses of the master and services
kubectl cluster-info

9) Dump cluster state to STDOUT
kubectl cluster-info dump

10) Dump cluster state to a file
kubectl cluster-info dump --output-directory=</file/path>

11) List all images running in a cluster
kubectl get pods -A -o=custom-columns='DATA:spec.containers[*].image'

12) what is the difference between a pod and a container ?
Container - A container runs in a pod in a container runtime env
pods - A group of pods run on a cluster

13) every container in a pod runs on the same node,

14) What is a container vs VM? 
containers provide a way to virtualize an OS so that multiple workloads can run on a single OS instance. With VMs, the hardware is being virtualized to run multiple OS instances.

15) difference between continuous delivery and continuous deployment ?
Continuous Delivery means complete delivery of the application to customer; Continuous Deployment includes only deployment of the application in customer environment

16) what is stateful and stateless in kubernetes ?
Stateful applications save data to persistent disk storage for use by the server
A stateless application is one which depends on no persistent storage

17) Display the current context
kubectl config current-context

18) Kubelet -Kubelet on the other hand is a process that runs on each node of a Kubernetes cluster and creates, destroys, or update pods and their Docker containers for the given node when instructed to do so
the required container(s). Kubelet works with the controller node to organize the container according to its associated pod.

19) kubectl - Kubectl is the CLI tool that developers use for interacting with a Kubernetes cluster

20)  kubeadm -kubeadm: the command to bootstrap the cluster.

21) Kubeproxy -kube-proxy is a network proxy that runs on each node in your cluster.
kube-proxy maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside of your cluster

22) what is taints and tolerations in kubernetes ?
Taints are the opposite -- they allow a node to repel a set of pods.
Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints
Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes. One or more taints are applied to a node; this marks that the node should not accept any pods that do not tolerate the taints.

Example to taint a node :
command - kubectl taint nodes node1 key1=value1:NoSchedule

Meaning of above command - places a taint on node node1. The taint has key key1, value value1, and taint effect NoSchedule. This means that no pod will be able to schedule onto node1 unless it has a matching toleration.


23) What is Scheduling, Preemption and Eviction ?
In Kubernetes, scheduling refers to making sure that Pods are matched to Nodes so that the kubelet can run them. Preemption is the process of terminating Pods with lower Priority so that Pods with higher Priority can schedule on Nodes. Eviction is the process of terminating one or more Pods on Nodes

24) What is node affinity and pod affinity ?
Node affinity is a set of rules used by the scheduler to determine where a pod can be placed
Pod affinity/anti-affinity allows you to constrain which nodes your pod is eligible to be scheduled on based on the labels on other pods

25) what is cordon and uncordon ?
Cordon will mark the node as unschedulable. Uncordon will mark the node as schedulable

26) what is namespace in kubernets cluster?
A Kubernetes namespace provides the scope for Pods, Services, and Deployments in the cluster

27) Kubernetes commands :

kubectl get pods                               # list all running pods in current active namespace
kubectl get pods -n kube-system                # list all running pods in specified namespace
kubectl get pods --all-namespaces               # list all running pods in all namespaces available
kubectl get pods -o wide                        # list all running pods in current active namespace wider output
kubectl describe pod <podname>                  # detailed output about a pod in current namespace
kubectl describe pod <podname> -n namespace     # detailed output about a pod in current namespace
kubectl exec -it my-pod -- /bin/bash            # get interactive shell of the container in existing pod ( 1 container case )
kubectl exec -it my-pod -c my-container -- /bin/bash      # get interative shell of the container in existing pod ( multi container)
kubectl delete pods <podname>                    # delete a pod in current active namespace
kubectl expose pod nginx --port=80 --target-port=80        # expose pod as service within the cluster
kubectl expose pod nginx --target-port=80 --type=NodePort     # expose pod as service within the cluster & outside of the cluster
kubectl get rs                              # List all replica sets in current active namespace
kubectl get rs -n <namespace>               # List the replica sets in <namespace>
kubectl describe rs <rsname>                # inspect the replica set
kubectl scale --replicas=x rs <rsname>      # Scale up/down replica set
kubectl expose rs <rsname> --port=<external> --target-port=<internal>          # expose rs as service & assign port on the cluster
kubectl expose rs <rsname> --port=<external> --type=NodePort                # expose rs as service & assign port on the Node
kubectl delete rs <rsname>                  # delete rs & pod under it
kubectl get svc                         # list all running services in current active namespace
kubectl describe svc <svcname> -n namespace             # detailed output about a service in  namespace
kubectl delete svc <svcname> -n namespace                    # delete a svc in  namespace
kubectl create -f deployment-ex1.yml          # create deployment
kubectl get deploy -n <namespace>               # List the deployments in <namespace>
kubectl describe deploy <deployment>                # inspect the deployment
kubectl scale --replicas=x deploy <deployment>      # Scale up/down deployment
kubectl expose deploy <deploy> --port=<external> --target-port=<internal> # expose deployment as service & assign port on the cluster
kubectl delete deploy <deployment>                  # delete deployment & pod under it
kubectl rollout history deploy <deployname>      # check the revisions of a Deployment
kubectl rollout status deploy <deployname>       # get status of rollout 
kubectl rollout undo deploy <deployname>         # rollback to the previous revision


28) LOAD TEST
ab -n 500000 -c 1000 http://10.97.161.152/
-n requests Number of requests to perform
-c concurrency Number of multiple requests to make at a time

29) INGRESS
An API object that manages external access to the services in a cluster, typically HTTP, Ingress can also provide load balancing, SSL termination and name-based virtual hosting
Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource

30) kubernetes conf file - $HOME/.kube/config

31) How to join kubernets master to nodes?
copy the kubeadm join token from master & run it on all nodes
kubeadm join <key>

32) suppose, you forgot token then how to recreate or get token from this command ?
kubeadm token create --print-join-command --ttl=0

33) what is kubeproxy and where it is connected ?
it is connected on node.
Kube-proxy act as a  network proxy and a load balancer. It is responsible for routing traffic to the appropriate container based on IP and port number of the incoming request.
he kube-proxy on all your Kubernetes nodes runs as a Kubernetes DaemonSet and its configuration is stored on a Kubernetes ConfigMap.

34) What is label and selector in Kubernetes?
Kubernetes labels are key/value pairs that can be attached to Kubernetes objects.
selector allows us to select Kubernetes resources based on the value of labels and resource fields assigned to a group of pods or nodes. 

35) What is node selector in Kubernetes?
nodeSelector is a field of PodSpec. It specifies a map of key-value pairs

36) What is the link between scaling and Deployments in Kubernetes?
Scaling out a Deployment will ensure new Pods are created and scheduled to Nodes with available resources. Scaling will increase the number of Pods to the new desired state.
When you scale an application, you increase or decrease the number of replicas.

37) How does Autoscaling work in Kubernetes?
Kubernetes autoscaling helps optimize resource usage and costs by automatically scaling a cluster up and down in line with demand." ... When load decreases, Kubernetes can then adjust back to fewer nodes and pods, conserving on resources and spending.”

38) what is hpa and vpa in kubernetes
Horizontal Pod Autoscaler ( HPA ) allocates pod replicas
Vertical Pod Autoscaler ( VPA ) automatically adjusts the CPU and Memory for your Pods.
